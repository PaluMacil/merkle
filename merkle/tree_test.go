package merkle_test

import (
	"github.com/PaluMacil/merkle/merkle"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestRoot_Single(t *testing.T) {
	dataBlocks := merkle.NodeLayer{
		{
			0x2b, 0x3a, 0x55, 0x61, 0xff, 0x1e, 0x94, 0xd2, 0xa0, 0x2b,
			0x7b, 0xa4, 0x5c, 0x0b, 0xd1, 0x8b, 0x7e, 0xc7, 0x63, 0x33,
		},
	}
	root := dataBlocks.Root()

	// the data block hash is the root hash if there is only one data block
	assert.Equal(t, root, dataBlocks[0])

	moreBlocksSame := merkle.NodeLayer{
		{
			0x2b, 0x3a, 0x55, 0x61, 0xff, 0x1e, 0x94, 0xd2, 0xa0, 0x2b,
			0x7b, 0xa4, 0x5c, 0x0b, 0xd1, 0x8b, 0x7e, 0xc7, 0x63, 0x33,
		},
	}

	assert.Equal(t, root, moreBlocksSame.Root())

	moreBlocksDifferent := merkle.NodeLayer{
		{
			0x7b, 0xa4, 0x5c, 0x0b, 0xd1, 0x8b, 0x7e, 0xc7, 0x63, 0x33,
			0x2b, 0x3a, 0x55, 0x61, 0xff, 0x1e, 0x94, 0xd2, 0xa0, 0x2b,
		},
	}

	assert.NotEqual(t, root, moreBlocksDifferent.Root())
}

func TestRoot_Two(t *testing.T) {
	dataBlocks := merkle.NodeLayer{
		{
			0x2b, 0x3a, 0x55, 0x61, 0xff, 0x1e, 0x94, 0xd2, 0xa0, 0x2b,
			0x7b, 0xa4, 0x5c, 0x0b, 0xd1, 0x8b, 0x7e, 0xc7, 0x63, 0x33,
		},
		{
			0xc7, 0x94, 0xd4, 0x4f, 0x69, 0xcf, 0x65, 0x29, 0x7e, 0xc6,
			0xb8, 0x57, 0x00, 0x01, 0x8e, 0x5c, 0xef, 0x9c, 0xee, 0x13,
		},
	}
	root := dataBlocks.Root()

	// the root should match neither data block hash
	assert.NotEqual(t, root, dataBlocks[0])
	assert.NotEqual(t, root, dataBlocks[1])

	moreBlocksSame := merkle.NodeLayer{
		{
			0x2b, 0x3a, 0x55, 0x61, 0xff, 0x1e, 0x94, 0xd2, 0xa0, 0x2b,
			0x7b, 0xa4, 0x5c, 0x0b, 0xd1, 0x8b, 0x7e, 0xc7, 0x63, 0x33,
		},
		{
			0xc7, 0x94, 0xd4, 0x4f, 0x69, 0xcf, 0x65, 0x29, 0x7e, 0xc6,
			0xb8, 0x57, 0x00, 0x01, 0x8e, 0x5c, 0xef, 0x9c, 0xee, 0x13,
		},
	}

	assert.Equal(t, root, moreBlocksSame.Root())

	moreBlocksDifferent := merkle.NodeLayer{
		{
			0x7b, 0xa4, 0x5c, 0x0b, 0xd1, 0x8b, 0x7e, 0xc7, 0x63, 0x33,
			0x2b, 0x3a, 0x55, 0x61, 0xff, 0x1e, 0x94, 0xd2, 0xa0, 0x2b,
		},
		{
			0x8e, 0x47, 0xc5, 0x79, 0x50, 0xf3, 0x8f, 0x5b, 0x34, 0xba,
			0xb3, 0x58, 0xf0, 0xef, 0x6d, 0x6b, 0x9a, 0x75, 0x54, 0xdc,
		},
	}

	assert.NotEqual(t, root, moreBlocksDifferent.Root())
}

func TestRoot_Four(t *testing.T) {
	dataBlocks := merkle.NodeLayer{
		{
			0x2b, 0x3a, 0x55, 0x61, 0xff, 0x1e, 0x94, 0xd2, 0xa0, 0x2b,
			0x7b, 0xa4, 0x5c, 0x0b, 0xd1, 0x8b, 0x7e, 0xc7, 0x63, 0x33,
		},
		{
			0x4b, 0x12, 0x91, 0x6c, 0xc7, 0x67, 0xb5, 0xf0, 0x89, 0xf5,
			0x3e, 0xaf, 0xc5, 0x77, 0xf5, 0xb7, 0x7b, 0x69, 0xdf, 0xa6,
		},
		{
			0xd2, 0xc3, 0x0b, 0xe2, 0xb3, 0x53, 0x42, 0x4e, 0xd2, 0xf4,
			0xa7, 0xce, 0xc4, 0x18, 0xb4, 0x47, 0xf4, 0x65, 0xe4, 0x24,
		},
		{
			0x22, 0xeb, 0xe8, 0x99, 0x67, 0x9b, 0xd6, 0x28, 0xf0, 0x5c,
			0x04, 0x4d, 0x70, 0x8b, 0xea, 0x81, 0x7d, 0x4b, 0xf7, 0x94,
		},
	}
	root := dataBlocks.Root()

	assert.NotEqual(t, root, dataBlocks[0])
	assert.NotEqual(t, root, dataBlocks[1])
	assert.NotEqual(t, root, dataBlocks[2])
	assert.NotEqual(t, root, dataBlocks[3])

	moreBlocksSame := merkle.NodeLayer{
		{
			0x2b, 0x3a, 0x55, 0x61, 0xff, 0x1e, 0x94, 0xd2, 0xa0, 0x2b,
			0x7b, 0xa4, 0x5c, 0x0b, 0xd1, 0x8b, 0x7e, 0xc7, 0x63, 0x33,
		},
		{
			0x4b, 0x12, 0x91, 0x6c, 0xc7, 0x67, 0xb5, 0xf0, 0x89, 0xf5,
			0x3e, 0xaf, 0xc5, 0x77, 0xf5, 0xb7, 0x7b, 0x69, 0xdf, 0xa6,
		},
		{
			0xd2, 0xc3, 0x0b, 0xe2, 0xb3, 0x53, 0x42, 0x4e, 0xd2, 0xf4,
			0xa7, 0xce, 0xc4, 0x18, 0xb4, 0x47, 0xf4, 0x65, 0xe4, 0x24,
		},
		{
			0x22, 0xeb, 0xe8, 0x99, 0x67, 0x9b, 0xd6, 0x28, 0xf0, 0x5c,
			0x04, 0x4d, 0x70, 0x8b, 0xea, 0x81, 0x7d, 0x4b, 0xf7, 0x94,
		},
	}

	assert.Equal(t, root, moreBlocksSame.Root())

	moreBlocksDifferent := merkle.NodeLayer{
		{
			0x3e, 0x3a, 0x55, 0x61, 0xff, 0x1e, 0x94, 0xd2, 0xa0, 0x2b,
			0x7b, 0xa4, 0x5c, 0x0b, 0xd1, 0x8b, 0x7e, 0xc7, 0x63, 0x33,
		},
		{
			0x4b, 0x12, 0x91, 0x6c, 0xc7, 0x67, 0xb5, 0xf0, 0x89, 0xf5,
			0x3e, 0xaf, 0xc5, 0x77, 0xf5, 0xb7, 0x7b, 0x69, 0xdf, 0xa6,
		},
		{
			0xd2, 0xc3, 0x0b, 0xe2, 0xb3, 0x53, 0x42, 0x4e, 0xd2, 0xf4,
			0xa7, 0xce, 0xc4, 0x18, 0xb4, 0x47, 0xf4, 0x65, 0xe4, 0x24,
		},
		{
			0x22, 0xeb, 0xe8, 0x99, 0x67, 0x9b, 0xd6, 0x28, 0xf0, 0x5c,
			0x04, 0x4d, 0x70, 0x8b, 0xea, 0x81, 0x7d, 0x4b, 0xf7, 0x94,
		},
	}

	assert.NotEqual(t, root, moreBlocksDifferent.Root())
}

func TestRoot_Five(t *testing.T) {
	dataBlocks := merkle.NodeLayer{
		{
			0x2b, 0x3a, 0x55, 0x61, 0xff, 0x1e, 0x94, 0xd2, 0xa0, 0x2b,
			0x7b, 0xa4, 0x5c, 0x0b, 0xd1, 0x8b, 0x7e, 0xc7, 0x63, 0x33,
		},
		{
			0x4b, 0x12, 0x91, 0x6c, 0xc7, 0x67, 0xb5, 0xf0, 0x89, 0xf5,
			0x3e, 0xaf, 0xc5, 0x77, 0xf5, 0xb7, 0x7b, 0x69, 0xdf, 0xa6,
		},
		{
			0xd2, 0xc3, 0x0b, 0xe2, 0xb3, 0x53, 0x42, 0x4e, 0xd2, 0xf4,
			0xa7, 0xce, 0xc4, 0x18, 0xb4, 0x47, 0xf4, 0x65, 0xe4, 0x24,
		},
		{
			0xd2, 0xc3, 0x0b, 0xe2, 0xb3, 0x53, 0x42, 0x4e, 0xd2, 0xf4,
			0xa7, 0xce, 0xc4, 0x18, 0xb4, 0x47, 0xf4, 0x65, 0xe4, 0x24,
		},
		{
			0x22, 0xeb, 0xe8, 0x99, 0x67, 0x9b, 0xd6, 0x28, 0xf0, 0x5c,
			0x04, 0x4d, 0x70, 0x8b, 0xea, 0x81, 0x7d, 0x4b, 0xf7, 0x94,
		},
	}
	root := dataBlocks.Root()

	assert.NotEqual(t, root, dataBlocks[0])
	assert.NotEqual(t, root, dataBlocks[1])
	assert.NotEqual(t, root, dataBlocks[2])
	assert.NotEqual(t, root, dataBlocks[3])
	assert.NotEqual(t, root, dataBlocks[4])

	moreBlocksSame := merkle.NodeLayer{
		{
			0x2b, 0x3a, 0x55, 0x61, 0xff, 0x1e, 0x94, 0xd2, 0xa0, 0x2b,
			0x7b, 0xa4, 0x5c, 0x0b, 0xd1, 0x8b, 0x7e, 0xc7, 0x63, 0x33,
		},
		{
			0x4b, 0x12, 0x91, 0x6c, 0xc7, 0x67, 0xb5, 0xf0, 0x89, 0xf5,
			0x3e, 0xaf, 0xc5, 0x77, 0xf5, 0xb7, 0x7b, 0x69, 0xdf, 0xa6,
		},
		{
			0xd2, 0xc3, 0x0b, 0xe2, 0xb3, 0x53, 0x42, 0x4e, 0xd2, 0xf4,
			0xa7, 0xce, 0xc4, 0x18, 0xb4, 0x47, 0xf4, 0x65, 0xe4, 0x24,
		},
		{
			0xd2, 0xc3, 0x0b, 0xe2, 0xb3, 0x53, 0x42, 0x4e, 0xd2, 0xf4,
			0xa7, 0xce, 0xc4, 0x18, 0xb4, 0x47, 0xf4, 0x65, 0xe4, 0x24,
		},
		{
			0x22, 0xeb, 0xe8, 0x99, 0x67, 0x9b, 0xd6, 0x28, 0xf0, 0x5c,
			0x04, 0x4d, 0x70, 0x8b, 0xea, 0x81, 0x7d, 0x4b, 0xf7, 0x94,
		},
	}

	assert.Equal(t, root, moreBlocksSame.Root())

	moreBlocksDifferent := merkle.NodeLayer{
		{
			0x3e, 0x3a, 0x55, 0x61, 0xff, 0x1e, 0x94, 0xd2, 0xa0, 0x2b,
			0x7b, 0xa4, 0x5c, 0x0b, 0xd1, 0x8b, 0x7e, 0xc7, 0x63, 0x33,
		},
		{
			0x4b, 0x12, 0x91, 0x6c, 0xc7, 0x67, 0xb5, 0xf0, 0x89, 0xf5,
			0x3e, 0xaf, 0xc5, 0x77, 0xf5, 0xb7, 0x7b, 0x69, 0xdf, 0xa6,
		},
		{
			0xd2, 0xc3, 0x0b, 0xe2, 0xb3, 0x53, 0x42, 0x4e, 0xd2, 0xf4,
			0xa7, 0xce, 0xc4, 0x18, 0xb4, 0x47, 0xf4, 0x65, 0xe4, 0x24,
		},
		{
			0xd2, 0xc3, 0x0b, 0xe2, 0xb3, 0x53, 0x42, 0x4e, 0xd2, 0xf4,
			0xa7, 0xce, 0xc4, 0x18, 0xb4, 0x47, 0xf4, 0x65, 0xe4, 0x24,
		},
		{
			0x22, 0xeb, 0xe8, 0x99, 0x67, 0x9b, 0xd6, 0x28, 0xf0, 0x5c,
			0x04, 0x4d, 0x70, 0x8b, 0xea, 0x81, 0x7d, 0x4b, 0xf7, 0x94,
		},
	}

	assert.NotEqual(t, root, moreBlocksDifferent.Root())

	moreBlocksDifferentAgain := merkle.NodeLayer{
		{
			0x2b, 0x3a, 0x55, 0x61, 0xff, 0x1e, 0x94, 0xd2, 0xa0, 0x2b,
			0x7b, 0xa4, 0x5c, 0x0b, 0xd1, 0x8b, 0x7e, 0xc7, 0x63, 0x33,
		},
		{
			0x4b, 0x12, 0x91, 0x6c, 0xc7, 0x67, 0xb5, 0xf0, 0x89, 0xf5,
			0x3e, 0xaf, 0xc5, 0x77, 0xf5, 0xb7, 0x7b, 0x69, 0xdf, 0xa6,
		},
		{
			0xd2, 0xc3, 0x0b, 0xe2, 0xb3, 0x53, 0x42, 0x4e, 0xd2, 0xf4,
			0xa7, 0xce, 0xc4, 0x18, 0xb4, 0x47, 0xf4, 0x65, 0xe4, 0x24,
		},
		{
			0xd2, 0xc3, 0x0b, 0xe2, 0xb3, 0x53, 0x42, 0x4e, 0xd2, 0xf4,
			0xa7, 0xce, 0xc4, 0x18, 0xb4, 0x47, 0xf4, 0x65, 0xe4, 0x24,
		},
		{
			0x22, 0xeb, 0xe8, 0x99, 0x67, 0x9b, 0xd6, 0x28, 0xf0, 0x5c,
			0x04, 0x4d, 0x70, 0x8b, 0xea, 0x81, 0x7d, 0x4b, 0xf7, 0x15,
		},
	}

	assert.NotEqual(t, root, moreBlocksDifferentAgain.Root())
}

func TestFrom(t *testing.T) {
	carrot1, err := merkle.From("../text/carrot1.txt")
	assert.Nil(t, err)
	carrot1Root := carrot1.Root()

	carrot2, err := merkle.From("../text/carrot2.txt")
	assert.Nil(t, err)
	carrot2Root := carrot2.Root()

	notCarrot, err := merkle.From("../text/not-carrot.txt")
	assert.Nil(t, err)
	notCarrotRoot := notCarrot.Root()

	group1, err := merkle.From("../text/carrot1.txt", "../text/carrot2.txt", "../text/banana.txt")
	assert.Nil(t, err)
	group1Root := group1.Root()

	group2, err := merkle.From("../text/carrot1.txt", "../text/not-carrot.txt", "../text/banana.txt")
	assert.Nil(t, err)
	group2Root := group2.Root()

	assert.Equal(t, carrot1Root, carrot2Root)
	assert.NotEqual(t, carrot1Root, notCarrotRoot)
	assert.NotEqual(t, carrot1Root, group1Root)
	assert.NotEqual(t, group1Root, group2Root)
}
